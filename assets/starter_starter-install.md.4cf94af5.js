import{_ as s,c as a,o as n,d as o}from"./app.bb012cd2.js";const A=JSON.parse('{"title":"快速上手","description":"","frontmatter":{"title":"快速上手","editLink":true},"headers":[{"level":3,"title":"go.mod 配置 Gin 开发环境","slug":"go-mod-配置-gin-开发环境","link":"#go-mod-配置-gin-开发环境","children":[]},{"level":3,"title":"测试一下","slug":"测试一下","link":"#测试一下","children":[]}],"relativePath":"starter/starter-install.md"}'),l={name:"starter/starter-install.md"},p=o(`<h3 id="go-mod-配置-gin-开发环境" tabindex="-1">go.mod 配置 Gin 开发环境 <a class="header-anchor" href="#go-mod-配置-gin-开发环境" aria-hidden="true">#</a></h3><blockquote><p>安装 GO1.19 完毕后，前两步和旧版一致，都需要在环境变量里面配置好 GOROOT 和 GOPATH 以及配置代理</p></blockquote><br><h4 id="本地环境变量" tabindex="-1">本地环境变量 <a class="header-anchor" href="#本地环境变量" aria-hidden="true">#</a></h4><p>添加两个 <code>用户变量</code></p><ol><li>GOROOT（根目录）：选择 go 根目录下的 bin 文件夹</li><li>GOPATH（工作目录）：随便选一个文件夹，go get 下载的内容都会存在里面，故外部模块都从这个文件夹调用；决定不要和 GOROOT 路径一致</li></ol><br><p>再添加一个 <code>系统变量</code></p><p>我们一般会看见系统变量默认有一个 path，如果没有就新建一个</p><p>在 path 变量底部追加一个值，该值和 GOROOT 值完全一致！</p><br><h4 id="配置代理" tabindex="-1">配置代理 <a class="header-anchor" href="#配置代理" aria-hidden="true">#</a></h4><p>由于外网会墙掉，没法直接使用 go get 下载模块，所以打开命令行直接丢这两行进去运行即可配置好代理：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">go</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">env</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-w</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">GO111MODULE=on</span></span>
<span class="line"><span style="color:#FFCB6B;">go</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">env</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-w</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">GOPROXY=https://goproxy.cn,direct</span></span>
<span class="line"></span></code></pre></div><br><h4 id="goland-项目创建" tabindex="-1">Goland 项目创建 <a class="header-anchor" href="#goland-项目创建" aria-hidden="true">#</a></h4><p>goland2020.3 及以上 IDE，<code>默认创建的 go 项目</code> 就是使用 <code>gomod</code> 管理！<br> goland2020.3 及以下的 IDE，创建项目时需要选择 <code>带小括号 vgo</code> 的才是 <code>gomod</code> 管理模式</p><br><p>下图为使用 goland2021.3 版本创建使用 gomod 管理的 go 项目：<br> 按照图中红色序号对应下面几步</p><ol><li>先选择第一个 Go 项目（第二个是使用旧的 GOPATH 创建的项目）</li><li>修改项目名字，默认为 awesomeproject</li><li>环境写上完整的代理路径！</li></ol><br><p>创建完毕，goland 会自动在根目录下创建一个 <code>go.mod</code> 文件</p><p>打开设置页面，找到 <code>GO-&gt;GOPATH</code><br> 把项目 GOPATH 和模块 GOPATH 全部删干净！<br> 然后勾选图中序号 2 所示的两个选项</p><blockquote><p>此时全局 GOPATH 会存在一个我们安装 GO 时配置环境变量时的 GOPATH，这个不用管也删不掉，之后我们所有下载的外部模块都会保存在这个全局 GOPATH 里面而不是我们的项目里面！！！这是重点！！！</p></blockquote><br><p>之后进入 <code>“GO 模块”</code><br> 勾选 <code>“启用 GO 模块集成”</code></p><p>这里的环境就是刚刚创建环境时我们填入的内容</p><br><h4 id="处理-go-mod" tabindex="-1">处理 go.mod <a class="header-anchor" href="#处理-go-mod" aria-hidden="true">#</a></h4><p>打开 goland 默认新建的 go.mod 文件，发现他只有一行，代表当前模块名字</p><p>为它添上两行，分别表示 go 版本，以及我们要使用的 GIN 框架</p><p>添加依赖的标准格式：<code>require 包名不带引号 版本号</code> （如果版本号不知道可以直接写 latest）</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">module ginmod</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">go 1.19</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">require github.com/gin-gonic/gin v1.8.2</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><br><p>此时直接打开命令行（在任意地方打开），输入该命令，把 GIN 框架安装到我们全局 GOPATH 下<br><code>go get -u github.com/gin-gonic/gin</code></p><p>安装成功了？非常好！<br> 此时进入项目根目录（即 <code>go.mod</code> 所在目录），打开命令行，输入命令让 go 自动分析依赖：<code>go mod tidy</code></p><p>等待一秒，若无报错，则整个环境配置就大功告成了！</p><br><h3 id="测试一下" tabindex="-1">测试一下 <a class="header-anchor" href="#测试一下" aria-hidden="true">#</a></h3><h4 id="新建文件" tabindex="-1">新建文件 <a class="header-anchor" href="#新建文件" aria-hidden="true">#</a></h4><p>按照以下树状图创建对应文件</p><p><code>ginmod</code> 是项目根目录， <code>.idea</code> 是 idea 项目自己创建的文件夹，不用管</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">─ginmod</span></span>
<span class="line"><span style="color:#A6ACCD;">    │  go.mod</span></span>
<span class="line"><span style="color:#A6ACCD;">    │  go.sum</span></span>
<span class="line"><span style="color:#A6ACCD;">    │</span></span>
<span class="line"><span style="color:#A6ACCD;">    ├─.idea</span></span>
<span class="line"><span style="color:#A6ACCD;">    │      .gitignore</span></span>
<span class="line"><span style="color:#A6ACCD;">    │      ginmod.iml</span></span>
<span class="line"><span style="color:#A6ACCD;">    │      modules.xml</span></span>
<span class="line"><span style="color:#A6ACCD;">    │      workspace.xml</span></span>
<span class="line"><span style="color:#A6ACCD;">    │</span></span>
<span class="line"><span style="color:#A6ACCD;">    └─src</span></span>
<span class="line"><span style="color:#A6ACCD;">        │  main.go</span></span>
<span class="line"><span style="color:#A6ACCD;">        │</span></span>
<span class="line"><span style="color:#A6ACCD;">        └─router</span></span>
<span class="line"><span style="color:#A6ACCD;">                R1.go</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><br><h4 id="r1-go" tabindex="-1">R1.go <a class="header-anchor" href="#r1-go" aria-hidden="true">#</a></h4><p>写一个简单的单文件上传路由</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">router</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">github.com/gin-gonic/gin</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">net/http</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 由于作者非常懒，内容就略过了，这里主要是为了测试不同包下方法导入</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SingleFileUpload</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">c </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">gin</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Context</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	c</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">JSON</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">http</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">StatusOK</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> gin</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">H</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">status</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">success</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">})</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><br><h4 id="main-go" tabindex="-1">main.go <a class="header-anchor" href="#main-go" aria-hidden="true">#</a></h4><p>到我们的主方法啦，在 import 中导入指定包，取个别名，就可以愉快的使用对应的方法啦！</p><p>导入外部包的格式是（虽然 goland 会智能补全，但是还是建议了解一下）：<br> module 名字即 go.mod 第一行的 module 后面跟着的名字<br> 之后按照相对路径直接走下去就好！<br><code>module名字/xx/xx</code></p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">	router1 </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">ginmod/src/router</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">github.com/gin-gonic/gin</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	router </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> gin</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Default</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// 无参方法调用别加小括号，否则报错够你喝一壶</span></span>
<span class="line"><span style="color:#A6ACCD;">	router</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GET</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/shit</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> router1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">SingleFileUpload</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	router</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Run</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">:10086</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><br><h4 id="开始测试" tabindex="-1">开始测试 <a class="header-anchor" href="#开始测试" aria-hidden="true">#</a></h4><p>点击 main()方法左侧的小绿三角，稍等片刻即可运行服务</p><p>建议使用 postman 或者 apifox 进行模拟请求测试</p><br>`,57),e=[p];function t(c,r,i,D,d,y){return n(),a("div",null,e)}const F=s(l,[["render",t]]);export{A as __pageData,F as default};
